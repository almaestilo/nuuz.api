using Nuuz.Application.Abstraction;
using Nuuz.Application.DTOs;
using Nuuz.Application.Services;
using Nuuz.Domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nuuz.Infrastructure.Services;
public class InterestService : IInterestService
{
    private readonly IInterestRepository _interestRepository;

    public InterestService(IInterestRepository interestRepository)
    {
        _interestRepository = interestRepository;
    }

    public async Task<InterestDto> CreateAsync(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            throw new ArgumentException("Name is required.", nameof(name));

        var trimmed = name.Trim();

        // 1) Prevent duplicates (exact match)
        var existing = await _interestRepository.GetByNameAsync(trimmed);
        if (existing is not null)
            return new InterestDto { Id = existing.Id, Name = existing.Name };

        // 2) Create and persist
        var entity = new Interest
        {
            // Id will be generated by BaseRepository if empty
            Name = trimmed
            // If your Interest has Slug/IsSystem/etc., set them here
        };

        var created = await _interestRepository.AddAsync(entity);

        // 3) Map to DTO
        return new InterestDto
        {
            Id = created.Id,
            Name = created.Name
        };
    }

    public async Task<IEnumerable<InterestDto>> GetAllAsync()
    {
        var items = await _interestRepository.GetAllOrderedAsync();
        return items.Select(i => new InterestDto { Id = i.Id, Name = i.Name });
    }

}
